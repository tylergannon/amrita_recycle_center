require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe TransferLineItemsController do

  # This should return the minimal set of attributes required to create a valid
  # TransferLineItem. As you add validations to TransferLineItem, be sure to
  # adjust the attributes here as well.
  let(:container) {create :container}
  let(:valid_attributes) { { "credit" => "false", gross_weight: 13, container_id: container.id } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TransferLineItemsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all transfer_line_items as @transfer_line_items" do
      transfer_line_item = create :transfer_line_item
      get :index, {}, valid_session
      assigns(:transfer_line_items).should eq([transfer_line_item])
    end
  end

  describe "GET show" do
    it "assigns the requested transfer_line_item as @transfer_line_item" do
      transfer_line_item = create :transfer_line_item
      get :show, {:id => transfer_line_item.to_param}, valid_session
      assigns(:transfer_line_item).should eq(transfer_line_item)
    end
  end

  describe "GET new" do
    it "assigns a new transfer_line_item as @transfer_line_item" do
      get :new, {}, valid_session
      assigns(:transfer_line_item).should be_a_new(TransferLineItem)
    end
  end

  describe "GET edit" do
    it "assigns the requested transfer_line_item as @transfer_line_item" do
      transfer_line_item = create :transfer_line_item
      get :edit, {:id => transfer_line_item.to_param}, valid_session
      assigns(:transfer_line_item).should eq(transfer_line_item)
    end
  end
  # 
  # describe "POST create" do
  #   describe "with valid params" do
  #     it "creates a new TransferLineItem" do
  #       expect {
  #         post :create, {:transfer_line_item => valid_attributes}, valid_session
  #       }.to change(TransferLineItem, :count).by(1)
  #     end
  # 
  #     it "assigns a newly created transfer_line_item as @transfer_line_item" do
  #       post :create, {:transfer_line_item => valid_attributes}, valid_session
  #       assigns(:transfer_line_item).should be_a(TransferLineItem)
  #       assigns(:transfer_line_item).should be_persisted
  #     end
  # 
  #     it "redirects to the created transfer_line_item" do
  #       post :create, {:transfer_line_item => valid_attributes}, valid_session
  #       response.should redirect_to(TransferLineItem.last)
  #     end
  #   end
  # 
  #   describe "with invalid params" do
  #     it "assigns a newly created but unsaved transfer_line_item as @transfer_line_item" do
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       TransferLineItem.any_instance.stub(:save).and_return(false)
  #       post :create, {:transfer_line_item => { "credit" => "invalid value" }}, valid_session
  #       assigns(:transfer_line_item).should be_a_new(TransferLineItem)
  #     end
  # 
  #     it "re-renders the 'new' template" do
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       TransferLineItem.any_instance.stub(:save).and_return(false)
  #       post :create, {:transfer_line_item => { "credit" => "invalid value" }}, valid_session
  #       response.should be_redirect
  #     end
  #   end
  # end
  # 
  # describe "PUT update" do
  #   describe "with valid params" do
  #     it "updates the requested transfer_line_item" do
  #       transfer_line_item = create :transfer_line_item
  #       # Assuming there are no other transfer_line_items in the database, this
  #       # specifies that the TransferLineItem created on the previous line
  #       # receives the :update_attributes message with whatever params are
  #       # submitted in the request.
  #       TransferLineItem.any_instance.should_receive(:update).with({ "credit" => "false" })
  #       put :update, {:id => transfer_line_item.to_param, :transfer_line_item => { "credit" => "false" }}, valid_session
  #     end
  # 
  #     it "assigns the requested transfer_line_item as @transfer_line_item" do
  #       transfer_line_item = create :transfer_line_item
  #       put :update, {:id => transfer_line_item.to_param, :transfer_line_item => valid_attributes}, valid_session
  #       assigns(:transfer_line_item).should eq(transfer_line_item)
  #     end
  # 
  #     it "redirects to the transfer_line_item" do
  #       transfer_line_item = create :transfer_line_item
  #       put :update, {:id => transfer_line_item.to_param, :transfer_line_item => valid_attributes}, valid_session
  #       response.should redirect_to(transfer_line_item)
  #     end
  #   end
  # 
  #   describe "with invalid params" do
  #     it "assigns the transfer_line_item as @transfer_line_item" do
  #       transfer_line_item = create :transfer_line_item
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       TransferLineItem.any_instance.stub(:save).and_return(false)
  #       put :update, {:id => transfer_line_item.to_param, :transfer_line_item => { "credit" => "invalid value" }}, valid_session
  #       assigns(:transfer_line_item).should eq(transfer_line_item)
  #     end
  # 
  #     it "re-renders the 'edit' template" do
  #       transfer_line_item = create :transfer_line_item
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       TransferLineItem.any_instance.stub(:save).and_return(false)
  #       put :update, {:id => transfer_line_item.to_param, :transfer_line_item => { "credit" => "invalid value" }}, valid_session
  #       response.should be_redirect
  #     end
  #   end
  # end
  # 
  describe "DELETE destroy" do
    it "destroys the requested transfer_line_item" do
      transfer_line_item = create :transfer_line_item
      expect {
        delete :destroy, {:id => transfer_line_item.to_param}, valid_session
      }.to change(TransferLineItem, :count).by(-1)
    end

    it "redirects to the transfer_line_items list" do
      transfer_line_item = create :transfer_line_item
      delete :destroy, {:id => transfer_line_item.to_param}, valid_session
      response.should redirect_to(transfer_line_items_url)
    end
  end

end
